
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://kgtfpuvksmqyaraijoal.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtndGZwdXZrc21xeWFyYWlqb2FsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM4MjAxMjksImV4cCI6MjA1OTM5NjEyOX0._fj5EqjZBmS_fHB5Z2p2lDJdXilePMUrbf3If_wGBz0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Enhanced logging for Supabase operations
const originalFrom = supabase.from.bind(supabase);
supabase.from = (table) => {
  console.log(`üîç Supabase: Accessing table "${table}"`);
  return originalFrom(table);
};

// Add a generic RPC function with proper type casting and async handling
export const rpcCall = async <T = any>(
  functionName: string,
  params?: Record<string, any>
): Promise<{ data: T | null; error: any }> => {
  console.log(`üü¢ Calling Supabase RPC function: ${functionName}`, params ? params : 'without params');
  
  try {
    // Log the full URL for debugging in development
    if (import.meta.env.DEV) {
      console.log(`üåê Supabase RPC URL: ${SUPABASE_URL}/rest/v1/rpc/${functionName}`);
    }
    
    // Use type assertion to allow any string for functionName
    const response = await supabase.rpc(functionName as any, params);
    
    // Log the response
    if (response.error) {
      console.error(`‚ùå Supabase RPC error in ${functionName}:`, response.error);
      
      // Error details for PostgrestError - use optional chaining to safely access properties
      console.error(`‚ùå Message: ${response.error.message}`);
      
      // Only log additional details if they exist
      if (response.error.details) {
        console.error(`‚ùå Error details:`, response.error.details);
      }
      
      if (response.error.hint) {
        console.error(`‚ùå Error hint:`, response.error.hint);
      }
      
      if (response.error.code) {
        console.error(`‚ùå Error code:`, response.error.code);
      }
    } else {
      console.log(`‚úÖ Supabase RPC success for ${functionName}:`, response.data ? 'Data received' : 'No data');
      if (import.meta.env.DEV) {
        console.log(`üì¶ Response data:`, response.data);
      }
    }
    
    // Return in the expected format
    return {
      data: response.data as T | null,
      error: response.error
    };
  } catch (err) {
    console.error(`‚ùå‚ùå Unexpected error in Supabase RPC call to ${functionName}:`, err);
    return {
      data: null,
      error: err
    };
  }
};

// Enhance supabase insert and update operations with better logging
const enhanceSupabaseInsert = () => {
  const originalInsert = supabase.from('').insert;
  
  // @ts-ignore - We're monkey patching for logging purposes
  supabase.from = function(table) {
    const builder = originalFrom(table);
    const originalInsertFn = builder.insert;
    
    // Enhance the insert function with better logging
    builder.insert = function(...args) {
      console.log(`üìù Supabase: INSERT into "${table}" with data:`, args[0]);
      const insertResult = originalInsertFn.apply(this, args);
      
      // Add a then handler to log the result
      const originalThen = insertResult.then;
      insertResult.then = function(onFulfilled, onRejected) {
        return originalThen.call(this, (result) => {
          if (result.error) {
            console.error(`‚ùå Supabase: INSERT failed for "${table}":`, result.error);
            console.error(`‚ùå Error message: ${result.error.message}`);
            console.error(`‚ùå Error details:`, result.error.details);
            console.error(`‚ùå Error code:`, result.error.code);
          } else {
            console.log(`‚úÖ Supabase: INSERT successful for "${table}"`, result.data);
          }
          return onFulfilled ? onFulfilled(result) : result;
        }, onRejected);
      };
      
      return insertResult;
    };
    
    return builder;
  };
};

// Initialize the enhanced methods
enhanceSupabaseInsert();

// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from 'sonner';

const SUPABASE_URL = "https://kgtfpuvksmqyaraijoal.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtndGZwdXZrc21xeWFyYWlqb2FsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM4MjAxMjksImV4cCI6MjA1OTM5NjEyOX0._fj5EqjZBmS_fHB5Z2p2lDJdXilePMUrbf3If_wGBz0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

console.log(`üîå Initializing Supabase client with URL: ${SUPABASE_URL}`);
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true
  },
  global: {
    headers: {
      'x-application-name': 'ontario-loans'
    }
  },
  db: {
    schema: 'public'
  }
});

// Log supabase version info
console.log(`üìä Supabase client initialized`);

// Enhanced logging for Supabase operations
const originalFrom = supabase.from.bind(supabase);
supabase.from = function(table: string) {
  if (!table || table === "") {
    console.error("‚ùå Supabase: Invalid table name provided (empty string)");
    return originalFrom("applications");
  }
  console.log(`üîç Supabase: Accessing table "${table}" at ${SUPABASE_URL}/rest/v1/${table}`);
  return originalFrom(table);
} as typeof supabase.from;

// Add a generic RPC function with proper type casting and async handling
export const rpcCall = async <T = any>(
  functionName: string,
  params?: Record<string, any>
): Promise<{ data: T | null; error: any }> => {
  console.log(`üü¢ Calling Supabase RPC function: ${functionName}`, params ? params : 'without params');
  console.log(`üåê RPC Endpoint: ${SUPABASE_URL}/rest/v1/rpc/${functionName}`);
  
  try {
    if (import.meta.env.DEV) {
      console.log(`üåê Supabase RPC URL: ${SUPABASE_URL}/rest/v1/rpc/${functionName}`);
    }
    
    const response = await supabase.rpc(functionName as any, params);
    
    if (response.error) {
      console.error(`‚ùå Supabase RPC error in ${functionName}:`, response.error);
      
      console.error(`‚ùå Message: ${response.error.message}`);
      
      if (response.error.details) {
        console.error(`‚ùå Error details:`, response.error.details);
      }
      
      if (response.error.hint) {
        console.error(`‚ùå Error hint:`, response.error.hint);
      }
      
      if (response.error.code) {
        console.error(`‚ùå Error code:`, response.error.code);
      }
    } else {
      console.log(`‚úÖ Supabase RPC success for ${functionName}:`, response.data ? 'Data received' : 'No data');
      if (import.meta.env.DEV) {
        console.log(`üì¶ Response data:`, response.data);
      }
    }
    
    return {
      data: response.data as T | null,
      error: response.error
    };
  } catch (err) {
    console.error(`‚ùå‚ùå Unexpected error in Supabase RPC call to ${functionName}:`, err);
    return {
      data: null,
      error: err
    };
  }
};

// Improved test Supabase connection function with better error handling and retries
export const testSupabaseConnection = async (retries = 2): Promise<{connected: boolean, latency?: number, error?: string, data?: any}> => {
  try {
    console.log('üîç Testing Supabase connection...');
    const start = Date.now();
    
    const { data, error } = await supabase.from('applications').select('id').limit(1);
    
    const elapsed = Date.now() - start;
    
    if (error) {
      console.error(`‚ùå Supabase connection test failed after ${elapsed}ms:`, error);
      
      if (retries > 0) {
        console.log(`Retrying connection test (${retries} attempts left)...`);
        await new Promise(resolve => setTimeout(resolve, 1000));
        return testSupabaseConnection(retries - 1);
      }
      
      return {
        connected: false,
        latency: elapsed,
        error: error.message
      };
    }
    
    console.log(`‚úÖ Supabase connection successful (${elapsed}ms)`);
    return {
      connected: true,
      latency: elapsed,
      data
    };
  } catch (err) {
    const start = Date.now();
    const elapsed = Date.now() - start;
    console.error(`‚ùå Unexpected Supabase connection error after ${elapsed}ms:`, err);
    
    if (retries > 0) {
      console.log(`Retrying connection test (${retries} attempts left)...`);
      await new Promise(resolve => setTimeout(resolve, 1000));
      return testSupabaseConnection(retries - 1);
    }
    
    return {
      connected: false,
      latency: elapsed,
      error: err instanceof Error ? err.message : String(err)
    };
  }
};

// Add connection heartbeat at regular intervals to keep connection alive
let connectionIsActive = false;

const startConnectionHeartbeat = () => {
  if (connectionIsActive) return;
  
  connectionIsActive = true;
  console.log('üîÑ Starting Supabase connection heartbeat');
  
  const heartbeatInterval = setInterval(() => {
    testSupabaseConnection(1)
      .then(status => {
        if (!status.connected) {
          console.warn('üíî Supabase connection heartbeat failed');
        }
      })
      .catch(err => {
        console.error('üíî Supabase connection heartbeat error:', err);
      });
  }, 30000);
  
  window.addEventListener('beforeunload', () => {
    clearInterval(heartbeatInterval);
  });
};

// Start heartbeat check
if (import.meta.env.PROD) {
  startConnectionHeartbeat();
}

// Enhance supabase insert and update operations with better logging
const enhanceSupabaseInsert = () => {
  const originalInsert = supabase.from('applications').insert;
  
  supabase.from = function(table: string) {
    if (!table || table === "") {
      console.error("‚ùå Supabase: Invalid table name provided (empty string)");
      return originalFrom("applications");
    }
    
    const builder = originalFrom(table);
    const originalInsertFn = builder.insert;
    
    builder.insert = function(...args) {
      console.log(`üìù Supabase: INSERT into "${table}" with data:`, args[0]);
      console.log(`üåê INSERT endpoint: ${SUPABASE_URL}/rest/v1/${table}`);
      
      const insertResult = originalInsertFn.apply(this, args);
      
      const originalThen = insertResult.then;
      insertResult.then = function(onFulfilled, onRejected) {
        return originalThen.call(this, (result) => {
          if (result.error) {
            console.error(`‚ùå Supabase: INSERT failed for "${table}":`, result.error);
            console.error(`‚ùå Error message: ${result.error.message}`);
            console.error(`‚ùå Error details:`, result.error.details);
            console.error(`‚ùå Error code:`, result.error.code);
          } else {
            console.log(`‚úÖ Supabase: INSERT successful for "${table}"`, result.data);
          }
          return onFulfilled ? onFulfilled(result) : result;
        }, onRejected);
      };
      
      return insertResult;
    };
    
    return builder;
  } as typeof supabase.from;
};

// Initialize the enhanced methods
enhanceSupabaseInsert();

// Add debugging info to Application page to show endpoint and connection status
export const getSupabaseConnectionInfo = () => {
  return {
    url: SUPABASE_URL,
    tables: {
      applications: `${SUPABASE_URL}/rest/v1/applications`
    },
    isConnected: true
  };
};

// Check and report connection status on page load
window.addEventListener('DOMContentLoaded', () => {
  setTimeout(() => {
    testSupabaseConnection()
      .then(status => {
        if (!status.connected) {
          console.warn('‚ö†Ô∏è Initial connection check failed. Some features may not work properly.');
        }
      })
      .catch(err => {
        console.error('‚ö†Ô∏è Error during initial connection check:', err);
      });
  }, 1000);
});

// Expose function to check for network connectivity issues
export const checkNetworkConnectivity = async (): Promise<boolean> => {
  try {
    const response = await fetch('https://www.google.com/favicon.ico', { 
      mode: 'no-cors',
      cache: 'no-cache',
      method: 'HEAD'
    });
    return true;
  } catch (err) {
    console.error('Network connectivity check failed:', err);
    return false;
  }
};

// Export helper to diagnose connection issues
export const diagnoseConnectionIssues = async (): Promise<string> => {
  const hasNetwork = await checkNetworkConnectivity();
  if (!hasNetwork) {
    return "Network connectivity issue detected. Please check your internet connection.";
  }
  
  const supabaseStatus = await testSupabaseConnection(1);
  if (!supabaseStatus.connected) {
    return `Database connection issue: ${supabaseStatus.error || 'Unknown error'}`;
  }
  
  return "No connection issues detected.";
};
